#BlueJ class context
comment0.params=
comment0.target=EjerciciosArboles()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ EjerciciosArboles\n
comment1.params=arbol
comment1.target=int\ numeroIterativo(Biblioteca.Arboles.TreeIF)
comment1.text=\n\ M\u00E9todo\ iterativo\ para\ contar\ los\ elementos\ de\ un\ arbol\n\ \n\ @param\ el\ arbol\ de\ trabajo\n\ @return\ int\ con\ el\ n\u00FAmero\ de\ elementos\ \n
comment10.params=
comment10.target=Biblioteca.Arboles.TreeIF\ arbolEnteros()
comment2.params=arbol
comment2.target=int\ sumaIterativo(Biblioteca.Arboles.TreeIF)
comment2.text=\n\ M\u00E9todo\ iterativo\ para\ sumar\ el\ contenido\ "int"\ de\ los\ elementos\n\ \n\ @param\ el\ arbol\ de\ trabajo\n\ @return\ int\ con\ el\ n\u00FAmero\ de\ la\ suma\ de\ los\ elementos\ \n
comment3.params=tree\ i
comment3.target=int\ numeroElementos(Biblioteca.Arboles.TreeIF,\ int)
comment3.text=\n\ I.\ Dise\u00F1e\ una\ funcion\ que\ devuelva\ el\ n\u00FAmero\ de\ elementos\ que\ contiene\ un\ \u00E1rbol\ general\n
comment4.params=tree\ i
comment4.target=int\ sumaElementos(Biblioteca.Arboles.TreeIF,\ int)
comment4.text=\n\ II.\ Dise\u00F1e\ una\ funci\u00F3n\ que\ devuelve\ la\ suma\ de\ todos\ los\ elementos\ de\ un\ \u00E1rbol\ general\ de\ enteros\n
comment5.params=arbol\ lista
comment5.target=Biblioteca.Listas.ListIF\ elementosPares(Biblioteca.Arboles.TreeIF,\ Biblioteca.Listas.ListIF)
comment5.text=\n\ III.\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ devuelva\ una\ lista\ con\ todos\ los\ elementos\ pares\ de\ un\ \u00E1rbols\ de\ enteros\n
comment6.params=arbol\ arbol2
comment6.target=Biblioteca.Arboles.TreeIF\ eliminarImpares(Biblioteca.Arboles.TreeIF,\ Biblioteca.Arboles.TreeIF)
comment6.text=\n\ IV.\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ dadu\ un\ \u00E1rbol\ de\ enteros\ devuelva\ otro\ \u00E1rbol\ con\ los\ elementos\ pares\n
comment7.params=arbol\ i
comment7.target=void\ alturaArbol(Biblioteca.Arboles.TreeIF,\ int)
comment7.text=\n\ V.\ Dise\u00F1e\ una\ funci\u00F3n\ dado\ un\ \u00E1rbol\ de\ enteros\ que\ multiplique\ el\ valor\ en\ cada\ nodo\ por\ su\ altura\n
comment8.params=arbol\ arbol2
comment8.target=boolean\ comparacion(Biblioteca.Arboles.TreeIF,\ Biblioteca.Arboles.TreeIF)
comment8.text=\n\ VI.\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ determine\ si\ dos\ \u00E1rboles\ generales\ son\ estructuralmente\ id\u00E9nticos\n
comment9.params=arbol1\ arbol2
comment9.target=boolean\ espejo(Biblioteca.Arboles.TreeIF,\ Biblioteca.Arboles.TreeIF)
comment9.text=\n\ VII.\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ indique\ si\ dos\ \u00E1rboles\ son\ la\ imagen\ especular\ el\ uno\ del\ otro\n
numComments=11
