#BlueJ class context
comment0.params=
comment0.target=EjerciciosListas()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ EjerciciosListas\n
comment1.params=l
comment1.target=int\ longitudLista(Biblioteca.Listas.ListIF)
comment1.text=\n\ I.\ Longitud\ de\ la\ lista\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ calcule\ el\ n\u00FAmero\ de\ elemntos\ que\ contiene\ una\ lista\n
comment10.params=l\ o
comment10.target=Biblioteca.Listas.ListIF\ prefijo(Biblioteca.Listas.ListIF,\ java.lang.Object)
comment10.text=\n\ X.\ Lista\ prefijo\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ devuelva\ una\ sublista\ prefijo\ que\ precede\ a\ un\ elemento\ dado\n
comment11.params=l\ o
comment11.target=Biblioteca.Listas.ListIF\ sufijo(Biblioteca.Listas.ListIF,\ java.lang.Object)
comment11.text=\n\ XI.\ Lista\ sufijo\n
comment12.params=l\ aux\ i
comment12.target=Biblioteca.Listas.ListIF\ mayores(Biblioteca.Listas.ListIF,\ Biblioteca.Listas.ListIF,\ java.lang.Integer)
comment12.text=\n\ XII.\ Lista\ mayores\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ devuelva\ una\ lista\ con\ todos\ los\ elementos\ mayores\ a\ uno\ dado\n
comment2.params=l1\ l2
comment2.target=boolean\ comparaListas(Biblioteca.Listas.ListIF,\ Biblioteca.Listas.ListIF)
comment2.text=\n\ II.\ Comparar\ dos\ listas\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ quecompare\ lexicogr\u00E1ficamente\ 2\ listas\ de\ caracteres.\n
comment3.params=l1\ l2
comment3.target=boolean\ esSublista(Biblioteca.Listas.ListIF,\ Biblioteca.Listas.ListIF)
comment3.text=\n\ III.\ Sublista\n\ Dise\u00F1e\ una\ funci\u00F3n\ que\ dad\ una\ lista\ determine\ si\ unalista\ es\ sublista\ de\ otra\ dad\ de\ mayor\ tama\u00F1o\n
comment4.params=l1
comment4.target=java.lang.Object\ ultimoElemento(Biblioteca.Listas.ListIF)
comment4.text=\n\ IV.\ \u00DAltimo\ elemento\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ devuelve\ el\ \u00FAltimo\ elemento\ de\ una\ lista\n
comment5.params=l1\ o
comment5.target=Biblioteca.Listas.ListIF\ insertFinal(Biblioteca.Listas.ListIF,\ java.lang.Object)
comment5.text=\n\ V.\ Insertar\ al\ final\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ inserte\ un\ dato\ como\ \u00FAltimo\ elemento\ de\ una\ lista\n
comment6.params=l1\ l2
comment6.target=Biblioteca.Listas.ListIF\ concatenarListas(Biblioteca.Listas.ListIF,\ Biblioteca.Listas.ListIF)
comment6.text=\n\ VI.\ Concatenar\ dos\ listas\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ devuelve\ la\ lista\ resultante\ de\ concatenar\ dos\ listas\n
comment7.params=l
comment7.target=Biblioteca.Listas.ListIF\ invierteLista(Biblioteca.Listas.ListIF)
comment7.text=\n\ VII.\ Lista\ inversa\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ devuelva\ una\ lista\ con\ los\ elementos\ colocados\ de\ forma\ inversa\n
comment8.params=l\ o
comment8.target=Biblioteca.Listas.ListIF\ erase(Biblioteca.Listas.ListIF,\ java.lang.Object)
comment8.text=\n\ VIII.\ Borrado\ de\ un\ elemento\n\ Dise\u00F1e\ una\ funci\u00F3n\ recursiva\ que\ devuelva\ una\ lista\ que\ elimine\ la\ primera\ aparici\u00F3n\ de\ un\ elemento\n
comment9.params=l\ o
comment9.target=Biblioteca.Listas.ListIF\ eraseAll(Biblioteca.Listas.ListIF,\ java.lang.Object)
comment9.text=\n\ IX.\ Borrar\ todos\n\ Dise\u00F1e\ una\ funci\u00F3n\ que\ devuelva\ una\ lista\ donde\ se\ hayan\ eliminado\ todas\ las\ apariciones\ de\ un\ elemento\n
numComments=13
